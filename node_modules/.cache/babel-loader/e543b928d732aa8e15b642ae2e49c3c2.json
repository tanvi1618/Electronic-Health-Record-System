{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBytes = isBytes;\nexports.number = number;\nexports.bool = bool;\nexports.bytes = bytes;\nexports.hash = hash;\nexports.exists = exists;\nexports.output = output;\nfunction number(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n  return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';\n}\nfunction bytes(b) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    lengths[_key - 1] = arguments[_key];\n  }\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n  if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\nfunction exists(instance) {\n  let checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output\n};\nexports.default = assert;","map":{"version":3,"mappings":";;;;;AASAA,OAAA,CAAAC,OAAA,GAAAA,OAAA;AAsCSD,OAAA,CAAAE,MAAA,GAAAA,MAAA;AAAQF,OAAA,CAAAG,IAAA,GAAAA,IAAA;AAAMH,OAAA,CAAAI,KAAA,GAAAA,KAAA;AAAOJ,OAAA,CAAAK,IAAA,GAAAA,IAAA;AAAML,OAAA,CAAAM,MAAA,GAAAA,MAAA;AAAQN,OAAA,CAAAO,MAAA,GAAAA,MAAA;AA/C5C,SAASL,MAAM,CAACM,CAAS;EACvB,IAAI,CAACC,MAAM,CAACC,aAAa,CAACF,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,kCAAkCH,CAAC,EAAE,CAAC;AAC/F;AAEA,SAASL,IAAI,CAACS,CAAU;EACtB,IAAI,OAAOA,CAAC,KAAK,SAAS,EAAE,MAAM,IAAID,KAAK,CAAC,yBAAyBC,CAAC,EAAE,CAAC;AAC3E;AAEA;AACA,SAAgBX,OAAO,CAACY,CAAU;EAChC,OACEA,CAAC,YAAYC,UAAU,IACtBD,CAAC,IAAI,IAAI,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAACE,WAAW,CAACC,IAAI,KAAK,YAAa;AAE/E;AAEA,SAASZ,KAAK,CAACQ,CAAyB,EAAsB;EAC5D,IAAI,CAACX,OAAO,CAACW,CAAC,CAAC,EAAE,MAAM,IAAID,KAAK,CAAC,qBAAqB,CAAC;EAAC,kCADbM,OAAiB;IAAjBA,OAAiB;EAAA;EAE5D,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,IAAI,CAACD,OAAO,CAACE,QAAQ,CAACP,CAAC,CAACM,MAAM,CAAC,EACnD,MAAM,IAAIP,KAAK,CAAC,iCAAiCM,OAAO,mBAAmBL,CAAC,CAACM,MAAM,EAAE,CAAC;AAC1F;AAQA,SAASb,IAAI,CAACe,CAAO;EACnB,IAAI,OAAOA,CAAC,KAAK,UAAU,IAAI,OAAOA,CAAC,CAACC,MAAM,KAAK,UAAU,EAC3D,MAAM,IAAIV,KAAK,CAAC,iDAAiD,CAAC;EACpET,MAAM,CAACkB,CAAC,CAACE,SAAS,CAAC;EACnBpB,MAAM,CAACkB,CAAC,CAACG,QAAQ,CAAC;AACpB;AAEA,SAASjB,MAAM,CAACkB,QAAa,EAAsB;EAAA,IAApBC,aAAa,uEAAG,IAAI;EACjD,IAAID,QAAQ,CAACE,SAAS,EAAE,MAAM,IAAIf,KAAK,CAAC,kCAAkC,CAAC;EAC3E,IAAIc,aAAa,IAAID,QAAQ,CAACG,QAAQ,EAAE,MAAM,IAAIhB,KAAK,CAAC,uCAAuC,CAAC;AAClG;AACA,SAASJ,MAAM,CAACqB,GAAQ,EAAEJ,QAAa;EACrCpB,KAAK,CAACwB,GAAG,CAAC;EACV,MAAMC,GAAG,GAAGL,QAAQ,CAACF,SAAS;EAC9B,IAAIM,GAAG,CAACV,MAAM,GAAGW,GAAG,EAAE;IACpB,MAAM,IAAIlB,KAAK,CAAC,yDAAyDkB,GAAG,EAAE,CAAC;EACjF;AACF;AAIA,MAAMC,MAAM,GAAG;EAAE5B,MAAM;EAAEC,IAAI;EAAEC,KAAK;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAM,CAAE;AAC5DP,OAAA,CAAA+B,OAAA,GAAeD,MAAM","names":["exports","isBytes","number","bool","bytes","hash","exists","output","n","Number","isSafeInteger","Error","b","a","Uint8Array","constructor","name","lengths","length","includes","h","create","outputLen","blockLen","instance","checkFinished","destroyed","finished","out","min","assert","default"],"ignoreList":[],"sourceRoot":"","sources":["src/_assert.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}