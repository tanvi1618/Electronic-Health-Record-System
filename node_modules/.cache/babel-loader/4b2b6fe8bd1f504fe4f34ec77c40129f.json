{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\n\nvar Contract = require('web3-eth-contract');\nvar namehash = require('eth-ens-namehash');\nvar PromiEvent = require('web3-core-promievent');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */\nfunction Registry(ens) {\n  var self = this;\n  this.ens = ens;\n  this.contract = ens.checkNetwork().then(function (address) {\n    var contract = new Contract(REGISTRY_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    return contract;\n  });\n}\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\n *\n * @method owner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.owner = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n  return this.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.getOwner = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.owner(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the TTL of the given node by his name\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returnss {Promise<string>}\n */\nRegistry.prototype.getTTL = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.ttl(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.recordExists = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.recordExists(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.resolver = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n  return this.getResolver(name, callback);\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.getResolver = function (name, callback) {\n  var self = this;\n  return this.contract.then(function (contract) {\n    return contract.methods.resolver(namehash.hash(name)).call();\n  }).then(function (address) {\n    var contract = new Contract(RESOLVER_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    if (typeof callback === 'function') {\n      // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n      callback(contract, contract);\n      return;\n    }\n    return contract;\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    throw error;\n  });\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\nmodule.exports = Registry;","map":{"version":3,"names":["Contract","require","namehash","PromiEvent","formatters","utils","REGISTRY_ABI","RESOLVER_ABI","Registry","ens","self","contract","checkNetwork","then","address","setProvider","eth","currentProvider","prototype","owner","name","callback","console","warn","getOwner","promiEvent","methods","hash","call","receipt","resolve","catch","error","reject","eventEmitter","setOwner","txConfig","inputAddressFormatter","send","getTTL","ttl","setTTL","setSubnodeOwner","label","isHexStrict","sha3","setRecord","resolver","setSubnodeRecord","setApprovalForAll","operator","approved","isApprovedForAll","recordExists","getResolver","setResolver","module","exports"],"sources":["/Users/tanvisangale/Documents/Project2/Blockchain-Healthcare/node_modules/web3-eth-ens/lib/contracts/Registry.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\nvar Contract = require('web3-eth-contract');\nvar namehash = require('eth-ens-namehash');\nvar PromiEvent = require('web3-core-promievent');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */\nfunction Registry(ens) {\n    var self = this;\n    this.ens = ens;\n    this.contract = ens.checkNetwork().then(function (address) {\n        var contract = new Contract(REGISTRY_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n        return contract;\n    });\n}\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\n *\n * @method owner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.owner = function (name, callback) {\n    console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n    return this.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.getOwner = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.owner(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the TTL of the given node by his name\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returnss {Promise<string>}\n */\nRegistry.prototype.getTTL = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.ttl(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n    this.contract.then(function (contract) {\n        return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n    this.contract.then(function (contract) {\n        return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.recordExists = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.recordExists(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.resolver = function (name, callback) {\n    console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n    return this.getResolver(name, callback);\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.getResolver = function (name, callback) {\n    var self = this;\n    return this.contract.then(function (contract) {\n        return contract.methods.resolver(namehash.hash(name)).call();\n    }).then(function (address) {\n        var contract = new Contract(RESOLVER_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n        if (typeof callback === 'function') {\n            // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n            callback(contract, contract);\n            return;\n        }\n        return contract;\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    });\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\nmodule.exports = Registry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}