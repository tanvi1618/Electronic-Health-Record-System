{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = void 0;\nexports.fromBig = fromBig;\nexports.split = split;\nexports.add = add;\nconst U32_MASK64 = /* @__PURE__ */BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nfunction split(lst) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nconst toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s;\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexports.default = u64;","map":{"version":3,"mappings":"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","names":["exports","fromBig","split","add","U32_MASK64","BigInt","_32n","n","le","h","Number","l","lst","Ah","Uint32Array","length","Al","i","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","default"],"ignoreList":[],"sourceRoot":"","sources":["src/_u64.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}