{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */function (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _this = this;\n    var _a;\n    _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts) || this;\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n        var chainIdDoubled = _this.common.chainIdBN().muln(2);\n        // v and chain ID meet EIP-155 conditions\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    if (_this.common.isActivatedEIP(3860)) {\n      (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n    }\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(_this);\n    }\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n    var _a = __read(values, 9),\n      nonce = _a[0],\n      gasPrice = _a[1],\n      gasLimit = _a[2],\n      to = _a[3],\n      value = _a[4],\n      data = _a[5],\n      v = _a[6],\n      r = _a[7],\n      s = _a[8];\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data];\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n    }\n    return values;\n  };\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n    var message = this._getMessageToSign();\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.rlphash)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: _super.prototype.getDataFee.call(this),\n        hardfork: this.common.hardfork()\n      };\n    }\n    return _super.prototype.getDataFee.call(this);\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  Transaction.prototype.hash = function () {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n      }\n      return this.cache.hash;\n    }\n    return (0, ethereumjs_util_1.rlphash)(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    var message = this._getMessageToSign();\n    return (0, ethereumjs_util_1.rlphash)(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n    var msgHash = this.getMessageToVerifySignature();\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n    var _b = this,\n      v = _b.v,\n      r = _b.r,\n      s = _b.s;\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n    var opts = __assign(__assign({}, this.txOptions), {\n      common: this.common\n    });\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n  Transaction.prototype._validateTxV = function (v, common) {\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {\n        throw new Error(\"Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = \".concat(v));\n      }\n    }\n    var chainIdBN;\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (v !== undefined && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n  Transaction.prototype.errorStr = function () {\n    var errorStr = this._getSharedErrorPostfix();\n    errorStr += \" gasPrice=\".concat(this.gasPrice);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\nexports.default = Transaction;","map":{"version":3,"mappings":"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","names":["ethereumjs_util_1","require","types_1","baseTransaction_1","util_1","TRANSACTION_TYPE","Transaction","_super","__extends","txData","opts","_this","call","__assign","type","common","_validateTxV","v","gasPrice","BN","toBuffer","mul","gasLimit","gt","MAX_INTEGER","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","gteHardfork","isSigned","activeCapabilities","push","Capability","EIP155ReplayProtection","chainIdDoubled","chainIdBN","muln","eq","addn","isActivatedEIP","checkMaxInitCodeSize","data","length","freeze","_a","Object","fromTxData","fromSerializedTx","serialized","values","rlp","decode","Array","isArray","fromValuesArray","fromRlpSerializedTx","__read","nonce","to","value","r","s","validateNoLeadingZeroes","prototype","raw","bnToUnpaddedBuffer","undefined","buf","Buffer","from","serialize","encode","_getMessageToSign","supports","unpadBuffer","getMessageToSign","hashMessage","message","rlphash","getDataFee","cache","dataFee","hardfork","isFrozen","getUpfrontCost","add","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","N_DIV_2","_b","ecrecover","e","_processSignature","vBN","iadd","txOptions","toJSON","bnToHex","toString","ltn","eqn","concat","isValidEIP155V","numSub","subn","isEven","divn","_getCommon","_unsignedTxImplementsEIP155","_signedTxImplementsEIP155","onEIP155BlockOrLater","vAndChainIdMeetEIP155Conditions","errorStr","_getSharedErrorPostfix","BaseTransaction"],"ignoreList":[],"sourceRoot":"","sources":["../src/legacyTransaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}