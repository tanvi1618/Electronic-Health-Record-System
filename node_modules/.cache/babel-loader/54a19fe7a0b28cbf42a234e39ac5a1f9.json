{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\n\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar EthersTransactionUtils = require('@ethersproject/transactions');\nvar Method = function Method(options) {\n  if (!options.call || !options.name) {\n    throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n  }\n  this.name = options.name;\n  this.call = options.call;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter;\n  this.outputFormatter = options.outputFormatter;\n  this.transformPayload = options.transformPayload;\n  this.extraFormatters = options.extraFormatters;\n  this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n  this.requestManager = options.requestManager;\n  // reference to eth.accounts\n  this.accounts = options.accounts;\n  this.defaultBlock = options.defaultBlock || 'latest';\n  this.defaultAccount = options.defaultAccount || null;\n  this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n  this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n  this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n  this.defaultCommon = options.defaultCommon;\n  this.defaultChain = options.defaultChain;\n  this.defaultHardfork = options.defaultHardfork;\n  this.handleRevert = options.handleRevert;\n};\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n  this.requestManager = requestManager;\n  // reference to eth.accounts\n  if (accounts) {\n    this.accounts = accounts;\n  }\n};\nMethod.prototype.createFunction = function (requestManager, accounts) {\n  var func = this.buildCall();\n  func.call = this.call;\n  this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n  return func;\n};\nMethod.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  func.call = this.call;\n  var name = this.name.split('.');\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n  return typeof this.call === 'function' ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n  }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n  var _this = this;\n  if (!this.inputFormatter) {\n    return args;\n  }\n  return this.inputFormatter.map(function (formatter, index) {\n    // bind this for defaultBlock, and defaultAccount\n    return formatter ? formatter.call(_this, args[index]) : args[index];\n  });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n  var _this = this;\n  if (Array.isArray(result)) {\n    return result.map(function (res) {\n      return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n    });\n  } else {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n  }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var params = this.formatInput(args);\n  this.validateArgs(params);\n  var payload = {\n    method: call,\n    params: params,\n    callback: callback\n  };\n  if (this.transformPayload) {\n    payload = this.transformPayload(payload);\n  }\n  return payload;\n};\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n  var method = this,\n    promiseResolved = false,\n    canUnsubscribe = true,\n    timeoutCount = 0,\n    confirmationCount = 0,\n    intervalId = null,\n    lastBlock = null,\n    receiptJSON = '',\n    gasProvided = !!payload.params[0] && typeof payload.params[0] === 'object' && payload.params[0].gas ? payload.params[0].gas : null,\n    isContractDeployment = !!payload.params[0] && typeof payload.params[0] === 'object' && payload.params[0].data && payload.params[0].from && !payload.params[0].to,\n    hasBytecode = isContractDeployment && payload.params[0].data.length > 2;\n  // add custom send Methods\n  var _ethereumCalls = [new Method({\n    name: 'getBlockByNumber',\n    call: 'eth_getBlockByNumber',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatters.outputBlockFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getTransactionByHash',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionFormatter\n  }), new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        subscriptionName: 'newHeads',\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      }\n    }\n  })];\n  // attach methods to this._ethereumCall\n  var _ethereumCall = {};\n  _ethereumCalls.forEach(mthd => {\n    mthd.attachToObject(_ethereumCall);\n    mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n  });\n  // fire \"receipt\" and confirmation events and resolve after\n  var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n    if (!err) {\n      // create fake unsubscribe\n      if (!sub) {\n        sub = {\n          unsubscribe: function () {\n            clearInterval(intervalId);\n          }\n        };\n      }\n      // if we have a valid receipt we don't need to send a request\n      return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result)\n      // catch error from requesting receipt\n      ).catch(function (err) {\n        sub.unsubscribe();\n        promiseResolved = true;\n        utils._fireError({\n          message: 'Failed to check for transaction receipt:',\n          data: err\n        }, defer.eventEmitter, defer.reject);\n      })\n      // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n      .then(async function (receipt) {\n        if (!receipt || !receipt.blockHash) {\n          throw new Error('Receipt missing or blockHash null');\n        }\n        // apply extra formatters\n        if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n          receipt = method.extraFormatters.receiptFormatter(receipt);\n        }\n        // check if confirmation listener exists\n        if (defer.eventEmitter.listeners('confirmation').length > 0) {\n          var block;\n          // If there was an immediately retrieved receipt, it's already\n          // been confirmed by the direct call to checkConfirmation needed\n          // for parity instant-seal\n          if (existingReceipt === undefined || confirmationCount !== 0) {\n            // Get latest block to emit with confirmation\n            var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n            var latestBlockHash = latestBlock ? latestBlock.hash : null;\n            if (isPolling) {\n              // Check if actually a new block is existing on polling\n              if (lastBlock) {\n                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n                if (block) {\n                  lastBlock = block;\n                  defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                }\n              } else {\n                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                lastBlock = block;\n                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n              }\n            } else {\n              defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n            }\n          }\n          if (isPolling && block || !isPolling) {\n            confirmationCount++;\n          }\n          canUnsubscribe = false;\n          if (confirmationCount === method.transactionConfirmationBlocks + 1) {\n            // add 1 so we account for conf 0\n            sub.unsubscribe();\n            defer.eventEmitter.removeAllListeners();\n          }\n        }\n        return receipt;\n      })\n      // CHECK for CONTRACT DEPLOYMENT\n      .then(async function (receipt) {\n        if (isContractDeployment && !promiseResolved) {\n          if (!receipt.contractAddress) {\n            if (canUnsubscribe) {\n              sub.unsubscribe();\n              promiseResolved = true;\n            }\n            utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n            return;\n          }\n          var code;\n          try {\n            code = await _ethereumCall.getCode(receipt.contractAddress);\n          } catch (err) {\n            // ignore;\n          }\n          if (!code) {\n            return;\n          }\n          // If deployment is status.true and there was a real\n          // bytecode string, assume it was successful.\n          var deploymentSuccess = receipt.status === true && hasBytecode;\n          if (deploymentSuccess || code.length > 2) {\n            defer.eventEmitter.emit('receipt', receipt);\n            // if contract, return instance instead of receipt\n            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n              defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n            } else {\n              defer.resolve(receipt);\n            }\n            // need to remove listeners, as they aren't removed automatically when succesfull\n            if (canUnsubscribe) {\n              defer.eventEmitter.removeAllListeners();\n            }\n          } else {\n            utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n          }\n          if (canUnsubscribe) {\n            sub.unsubscribe();\n          }\n          promiseResolved = true;\n        }\n        return receipt;\n      })\n      // CHECK for normal tx check for receipt only\n      .then(async function (receipt) {\n        if (!isContractDeployment && !promiseResolved) {\n          if (!receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n            defer.eventEmitter.emit('receipt', receipt);\n            defer.resolve(receipt);\n            // need to remove listeners, as they aren't removed automatically when succesfull\n            if (canUnsubscribe) {\n              defer.eventEmitter.removeAllListeners();\n            }\n          } else {\n            receiptJSON = JSON.stringify(receipt, null, 2);\n            if (receipt.status === false || receipt.status === '0x0') {\n              try {\n                var revertMessage = null;\n                if (method.handleRevert && (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                  var txReplayOptions = payload.params[0];\n                  // If send was raw, fetch the transaction and reconstitute the\n                  // original params so they can be replayed with `eth_call`\n                  if (method.call === 'eth_sendRawTransaction') {\n                    var rawTransactionHex = payload.params[0];\n                    var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                    txReplayOptions = formatters.inputTransactionFormatter({\n                      data: parsedTx.data,\n                      to: parsedTx.to,\n                      from: parsedTx.from,\n                      gas: parsedTx.gasLimit.toHexString(),\n                      gasPrice: parsedTx.gasPrice.toHexString(),\n                      value: parsedTx.value.toHexString()\n                    });\n                  }\n                  // Get revert reason string with eth_call\n                  revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n                  if (revertMessage) {\n                    // Only throw a revert error if a revert reason is existing\n                    utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                  } else {\n                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                  }\n                } else {\n                  throw false; // Throw false and let the try/catch statement handle the error correctly after\n                }\n              } catch (error) {\n                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n              }\n            } else {\n              // Throw OOG if status is not existing and provided gas and used gas are equal\n              utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n            }\n          }\n          if (canUnsubscribe) {\n            sub.unsubscribe();\n          }\n          promiseResolved = true;\n        }\n      })\n      // time out the transaction if not mined after 50 blocks\n      .catch(function () {\n        timeoutCount++;\n        // check to see if we are http polling\n        if (!!isPolling) {\n          // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n          if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        } else {\n          if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        }\n      });\n    } else {\n      sub.unsubscribe();\n      promiseResolved = true;\n      utils._fireError({\n        message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n        data: err\n      }, defer.eventEmitter, defer.reject);\n    }\n  };\n  // start watching for confirmation depending on the support features of the provider\n  var startWatching = function (existingReceipt) {\n    const startInterval = () => {\n      intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n    };\n    if (!this.requestManager.provider.on) {\n      startInterval();\n    } else {\n      _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n        if (err || !blockHeader) {\n          // fall back to polling\n          startInterval();\n        } else {\n          checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n        }\n      });\n    }\n  }.bind(this);\n  // first check if we already have a confirmed transaction\n  _ethereumCall.getTransactionReceipt(result).then(function (receipt) {\n    if (receipt && receipt.blockHash) {\n      if (defer.eventEmitter.listeners('confirmation').length > 0) {\n        // We must keep on watching for new Blocks, if a confirmation listener is present\n        startWatching(receipt);\n      }\n      checkConfirmation(receipt, false);\n    } else if (!promiseResolved) {\n      startWatching();\n    }\n  }).catch(function () {\n    if (!promiseResolved) startWatching();\n  });\n};\nvar getWallet = function (from, accounts) {\n  var wallet = null;\n  // is index given\n  if (typeof from === 'number') {\n    wallet = accounts.wallet[from];\n    // is account given\n  } else if (!!from && typeof from === 'object' && from.address && from.privateKey) {\n    wallet = from;\n    // search in wallet for address\n  } else {\n    wallet = accounts.wallet[from.toLowerCase()];\n  }\n  return wallet;\n};\nMethod.prototype.buildCall = function () {\n  var method = this,\n    isSendTx = method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction',\n    // || method.call === 'personal_sendTransaction'\n    isCall = method.call === 'eth_call';\n  // actual send function\n  var send = function () {\n    var defer = promiEvent(!isSendTx),\n      payload = method.toPayload(Array.prototype.slice.call(arguments));\n    // CALLBACK function\n    var sendTxCallback = function (err, result) {\n      if (method.handleRevert && isCall && method.abiCoder) {\n        var reasonData;\n        // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n        // Geth >= 1.9.15 attaches the reason data to an error object.\n        // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n        if (!err && method.isRevertReasonString(result)) {\n          reasonData = result.substring(10);\n        } else if (err && err.data) {\n          reasonData = err.data.substring(10);\n        }\n        if (reasonData) {\n          var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n          var signature = 'Error(String)';\n          utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n            reason: reason,\n            signature: signature\n          });\n          return;\n        }\n      }\n      try {\n        result = method.formatOutput(result);\n      } catch (e) {\n        err = e;\n      }\n      if (result instanceof Error) {\n        err = result;\n      }\n      if (!err) {\n        if (payload.callback) {\n          payload.callback(null, result);\n        }\n      } else {\n        if (err.error) {\n          err = err.error;\n        }\n        return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n      }\n      // return PROMISE\n      if (!isSendTx) {\n        if (!err) {\n          defer.resolve(result);\n        }\n        // return PROMIEVENT\n      } else {\n        defer.eventEmitter.emit('transactionHash', result);\n        method._confirmTransaction(defer, result, payload);\n      }\n    };\n    // SENDS the SIGNED SIGNATURE\n    var sendSignedTx = function (sign) {\n      var signedPayload = {\n        ...payload,\n        method: 'eth_sendRawTransaction',\n        params: [sign.rawTransaction]\n      };\n      method.requestManager.send(signedPayload, sendTxCallback);\n    };\n    var sendRequest = function (payload, method) {\n      if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n        var wallet;\n        // ETH_SENDTRANSACTION\n        if (payload.method === 'eth_sendTransaction') {\n          var tx = payload.params[0];\n          wallet = getWallet(!!tx && typeof tx === 'object' ? tx.from : null, method.accounts);\n          // If wallet was found, sign tx, and send using sendRawTransaction\n          if (wallet && wallet.privateKey) {\n            var tx = JSON.parse(JSON.stringify(tx));\n            delete tx.from;\n            if (method.defaultChain && !tx.chain) {\n              tx.chain = method.defaultChain;\n            }\n            if (method.defaultHardfork && !tx.hardfork) {\n              tx.hardfork = method.defaultHardfork;\n            }\n            if (method.defaultCommon && !tx.common) {\n              tx.common = method.defaultCommon;\n            }\n            method.accounts.signTransaction(tx, wallet.privateKey).then(sendSignedTx).catch(function (err) {\n              if (typeof defer.eventEmitter.listeners === 'function' && defer.eventEmitter.listeners('error').length) {\n                try {\n                  defer.eventEmitter.emit('error', err);\n                } catch (err) {\n                  // Ignore userland error prevent it to bubble up within web3.\n                }\n                defer.eventEmitter.removeAllListeners();\n                defer.eventEmitter.catch(function () {});\n              }\n              defer.reject(err);\n            });\n            return;\n          }\n          // ETH_SIGN\n        } else if (payload.method === 'eth_sign') {\n          var data = payload.params[1];\n          wallet = getWallet(payload.params[0], method.accounts);\n          // If wallet was found, sign tx, and send using sendRawTransaction\n          if (wallet && wallet.privateKey) {\n            var sign = method.accounts.sign(data, wallet.privateKey);\n            if (payload.callback) {\n              payload.callback(null, sign.signature);\n            }\n            defer.resolve(sign.signature);\n            return;\n          }\n        }\n      }\n      return method.requestManager.send(payload, sendTxCallback);\n    };\n    // Send the actual transaction\n    if (isSendTx && !!payload.params[0] && typeof payload.params[0] === 'object' && typeof payload.params[0].gasPrice === 'undefined' && (typeof payload.params[0].maxPriorityFeePerGas === 'undefined' || typeof payload.params[0].maxFeePerGas === 'undefined')) {\n      _handleTxPricing(method, payload.params[0]).then(txPricing => {\n        if (txPricing.gasPrice !== undefined) {\n          payload.params[0].gasPrice = txPricing.gasPrice;\n        } else if (txPricing.maxPriorityFeePerGas !== undefined && txPricing.maxFeePerGas !== undefined) {\n          payload.params[0].maxPriorityFeePerGas = txPricing.maxPriorityFeePerGas;\n          payload.params[0].maxFeePerGas = txPricing.maxFeePerGas;\n        }\n        if (isSendTx) {\n          setTimeout(() => {\n            defer.eventEmitter.emit('sending', payload);\n          }, 0);\n        }\n        sendRequest(payload, method);\n      });\n    } else {\n      if (isSendTx) {\n        setTimeout(() => {\n          defer.eventEmitter.emit('sending', payload);\n        }, 0);\n      }\n      sendRequest(payload, method);\n    }\n    if (isSendTx) {\n      setTimeout(() => {\n        defer.eventEmitter.emit('sent', payload);\n      }, 0);\n    }\n    return defer.eventEmitter;\n  };\n  // necessary to attach things to the method\n  send.method = method;\n  // necessary for batch requests\n  send.request = this.request.bind(this);\n  return send;\n};\nfunction _handleTxPricing(method, tx) {\n  return new Promise((resolve, reject) => {\n    try {\n      var getBlockByNumber = new Method({\n        name: 'getBlockByNumber',\n        call: 'eth_getBlockByNumber',\n        params: 2,\n        inputFormatter: [function (blockNumber) {\n          return blockNumber ? utils.toHex(blockNumber) : 'latest';\n        }, function () {\n          return false;\n        }]\n      }).createFunction(method.requestManager);\n      var getGasPrice = new Method({\n        name: 'getGasPrice',\n        call: 'eth_gasPrice',\n        params: 0\n      }).createFunction(method.requestManager);\n      Promise.all([getBlockByNumber(), getGasPrice()]).then(responses => {\n        const [block, gasPrice] = responses;\n        if ((tx.type === '0x2' || tx.type === undefined) && block && block.baseFeePerGas) {\n          // The network supports EIP-1559\n          // Taken from https://github.com/ethers-io/ethers.js/blob/ba6854bdd5a912fe873d5da494cb5c62c190adde/packages/abstract-provider/src.ts/index.ts#L230\n          let maxPriorityFeePerGas, maxFeePerGas;\n          if (tx.gasPrice) {\n            // Using legacy gasPrice property on an eip-1559 network,\n            // so use gasPrice as both fee properties\n            maxPriorityFeePerGas = tx.gasPrice;\n            maxFeePerGas = tx.gasPrice;\n            delete tx.gasPrice;\n          } else {\n            maxPriorityFeePerGas = tx.maxPriorityFeePerGas || '0x9502F900'; // 2.5 Gwei\n            maxFeePerGas = tx.maxFeePerGas || utils.toHex(utils.toBN(block.baseFeePerGas).mul(utils.toBN(2)).add(utils.toBN(maxPriorityFeePerGas)));\n          }\n          resolve({\n            maxFeePerGas,\n            maxPriorityFeePerGas\n          });\n        } else {\n          if (tx.maxPriorityFeePerGas || tx.maxFeePerGas) throw Error(\"Network doesn't support eip-1559\");\n          resolve({\n            gasPrice\n          });\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    new Method({\n      name: 'call',\n      call: 'eth_call',\n      params: 2,\n      abiCoder: self.abiCoder,\n      handleRevert: true\n    }).createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber)).then(function () {\n      resolve(false);\n    }).catch(function (error) {\n      if (error.reason) {\n        resolve({\n          reason: error.reason,\n          signature: error.signature\n        });\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\nMethod.prototype.isRevertReasonString = function (data) {\n  return typeof data === 'string' && (data.length - 2) / 2 % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n  var payload = this.toPayload(Array.prototype.slice.call(arguments));\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n};\nmodule.exports = Method;","map":{"version":3,"names":["errors","require","formatters","utils","promiEvent","Subscriptions","subscriptions","EthersTransactionUtils","Method","options","call","name","Error","params","inputFormatter","outputFormatter","transformPayload","extraFormatters","abiCoder","requestManager","accounts","defaultBlock","defaultAccount","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","defaultCommon","defaultChain","defaultHardfork","handleRevert","prototype","setRequestManager","createFunction","func","buildCall","attachToObject","obj","split","length","getCall","args","extractCallback","pop","validateArgs","InvalidNumberOfParams","formatInput","_this","map","formatter","index","formatOutput","result","Array","isArray","res","toPayload","callback","payload","method","_confirmTransaction","defer","promiseResolved","canUnsubscribe","timeoutCount","confirmationCount","intervalId","lastBlock","receiptJSON","gasProvided","gas","isContractDeployment","data","from","to","hasBytecode","_ethereumCalls","inputBlockNumberFormatter","val","outputBlockFormatter","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","outputTransactionFormatter","type","subscriptionName","_ethereumCall","forEach","mthd","checkConfirmation","existingReceipt","isPolling","err","blockHeader","sub","unsubscribe","clearInterval","resolve","getTransactionReceipt","catch","_fireError","message","eventEmitter","reject","then","receipt","blockHash","receiptFormatter","listeners","block","undefined","latestBlock","getBlockByNumber","latestBlockHash","hash","number","emit","blockNumber","removeAllListeners","contractAddress","NoContractAddressFoundError","code","getCode","deploymentSuccess","status","contractDeployFormatter","ContractCodeNotStoredError","outOfGas","gasUsed","JSON","stringify","revertMessage","txReplayOptions","rawTransactionHex","parsedTx","parse","inputTransactionFormatter","gasLimit","toHexString","gasPrice","value","getRevertReason","TransactionRevertInstructionError","reason","signature","error","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","TransactionError","startWatching","startInterval","setInterval","bind","provider","on","subscribe","getWallet","wallet","address","privateKey","toLowerCase","isSendTx","isCall","send","slice","arguments","sendTxCallback","reasonData","isRevertReasonString","substring","decodeParameter","RevertInstructionError","e","sendSignedTx","sign","signedPayload","rawTransaction","sendRequest","tx","chain","hardfork","common","signTransaction","maxPriorityFeePerGas","maxFeePerGas","_handleTxPricing","txPricing","setTimeout","request","Promise","toHex","getGasPrice","all","responses","baseFeePerGas","toBN","mul","add","txOptions","self","numberToHex","format","module","exports"],"sources":["/Users/tanvisangale/Documents/Project2/Blockchain-Healthcare/node_modules/web3-core-method/lib/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar EthersTransactionUtils = require('@ethersproject/transactions');\nvar Method = function Method(options) {\n    if (!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n    this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n    this.requestManager = options.requestManager;\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n    this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n    this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n    this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n    this.defaultCommon = options.defaultCommon;\n    this.defaultChain = options.defaultChain;\n    this.defaultHardfork = options.defaultHardfork;\n    this.handleRevert = options.handleRevert;\n};\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n};\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n    return func;\n};\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    }\n    else {\n        obj[name[0]] = func;\n    }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return typeof this.call === 'function' ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (typeof (args[args.length - 1]) === 'function') {\n        return args.pop(); // modify the args array!\n    }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n    if (!this.inputFormatter) {\n        return args;\n    }\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n    if (Array.isArray(result)) {\n        return result.map(function (res) {\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    }\n    else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n    return payload;\n};\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this, promiseResolved = false, canUnsubscribe = true, timeoutCount = 0, confirmationCount = 0, intervalId = null, lastBlock = null, receiptJSON = '', gasProvided = ((!!payload.params[0] && typeof payload.params[0] === 'object') && payload.params[0].gas) ? payload.params[0].gas : null, isContractDeployment = (!!payload.params[0] && typeof payload.params[0] === 'object') &&\n        payload.params[0].data &&\n        payload.params[0].from &&\n        !payload.params[0].to, hasBytecode = isContractDeployment && payload.params[0].data.length > 2;\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getBlockByNumber',\n            call: 'eth_getBlockByNumber',\n            params: 2,\n            inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n                    return !!val;\n                }],\n            outputFormatter: formatters.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getTransactionByHash',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionFormatter\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads',\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _ethereumCalls.forEach(mthd => {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n                // catch error from requesting receipt\n                .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({\n                    message: 'Failed to check for transaction receipt:',\n                    data: err\n                }, defer.eventEmitter, defer.reject);\n            })\n                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n                .then(async function (receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                    var block;\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0) {\n                        // Get latest block to emit with confirmation\n                        var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n                        var latestBlockHash = latestBlock ? latestBlock.hash : null;\n                        if (isPolling) { // Check if actually a new block is existing on polling\n                            if (lastBlock) {\n                                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n                                if (block) {\n                                    lastBlock = block;\n                                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                                }\n                            }\n                            else {\n                                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                                lastBlock = block;\n                                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                            }\n                        }\n                        else {\n                            defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                        }\n                    }\n                    if ((isPolling && block) || !isPolling) {\n                        confirmationCount++;\n                    }\n                    canUnsubscribe = false;\n                    if (confirmationCount === method.transactionConfirmationBlocks + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n                return receipt;\n            })\n                // CHECK for CONTRACT DEPLOYMENT\n                .then(async function (receipt) {\n                if (isContractDeployment && !promiseResolved) {\n                    if (!receipt.contractAddress) {\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n                        utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        return;\n                    }\n                    var code;\n                    try {\n                        code = await _ethereumCall.getCode(receipt.contractAddress);\n                    }\n                    catch (err) {\n                        // ignore;\n                    }\n                    if (!code) {\n                        return;\n                    }\n                    // If deployment is status.true and there was a real\n                    // bytecode string, assume it was successful.\n                    var deploymentSuccess = receipt.status === true && hasBytecode;\n                    if (deploymentSuccess || code.length > 2) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        // if contract, return instance instead of receipt\n                        if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                            defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                        }\n                        else {\n                            defer.resolve(receipt);\n                        }\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n                return receipt;\n            })\n                // CHECK for normal tx check for receipt only\n                .then(async function (receipt) {\n                if (!isContractDeployment && !promiseResolved) {\n                    if (!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        receiptJSON = JSON.stringify(receipt, null, 2);\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            try {\n                                var revertMessage = null;\n                                if (method.handleRevert &&\n                                    (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                                    var txReplayOptions = payload.params[0];\n                                    // If send was raw, fetch the transaction and reconstitute the\n                                    // original params so they can be replayed with `eth_call`\n                                    if (method.call === 'eth_sendRawTransaction') {\n                                        var rawTransactionHex = payload.params[0];\n                                        var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                                        txReplayOptions = formatters.inputTransactionFormatter({\n                                            data: parsedTx.data,\n                                            to: parsedTx.to,\n                                            from: parsedTx.from,\n                                            gas: parsedTx.gasLimit.toHexString(),\n                                            gasPrice: parsedTx.gasPrice.toHexString(),\n                                            value: parsedTx.value.toHexString()\n                                        });\n                                    }\n                                    // Get revert reason string with eth_call\n                                    revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n                                    if (revertMessage) { // Only throw a revert error if a revert reason is existing\n                                        utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                                    }\n                                    else {\n                                        throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                    }\n                                }\n                                else {\n                                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                }\n                            }\n                            catch (error) {\n                                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                            }\n                        }\n                        else {\n                            // Throw OOG if status is not existing and provided gas and used gas are equal\n                            utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        }\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n            })\n                // time out the transaction if not mined after 50 blocks\n                .catch(function () {\n                timeoutCount++;\n                // check to see if we are http polling\n                if (!!isPolling) {\n                    // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n                    if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n                else {\n                    if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n        }\n        else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err\n            }, defer.eventEmitter, defer.reject);\n        }\n    };\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function (existingReceipt) {\n        const startInterval = () => {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        };\n        if (!this.requestManager.provider.on) {\n            startInterval();\n        }\n        else {\n            _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n                if (err || !blockHeader) {\n                    // fall back to polling\n                    startInterval();\n                }\n                else {\n                    checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n                }\n            });\n        }\n    }.bind(this);\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n        .then(function (receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n        }\n        else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n        .catch(function () {\n        if (!promiseResolved)\n            startWatching();\n    });\n};\nvar getWallet = function (from, accounts) {\n    var wallet = null;\n    // is index given\n    if (typeof from === 'number') {\n        wallet = accounts.wallet[from];\n        // is account given\n    }\n    else if (!!from && typeof from === 'object' && from.address && from.privateKey) {\n        wallet = from;\n        // search in wallet for address\n    }\n    else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n    return wallet;\n};\nMethod.prototype.buildCall = function () {\n    var method = this, isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'), // || method.call === 'personal_sendTransaction'\n    isCall = (method.call === 'eth_call');\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx), payload = method.toPayload(Array.prototype.slice.call(arguments));\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            if (method.handleRevert && isCall && method.abiCoder) {\n                var reasonData;\n                // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n                // Geth >= 1.9.15 attaches the reason data to an error object.\n                // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n                if (!err && method.isRevertReasonString(result)) {\n                    reasonData = result.substring(10);\n                }\n                else if (err && err.data) {\n                    reasonData = err.data.substring(10);\n                }\n                if (reasonData) {\n                    var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n                    var signature = 'Error(String)';\n                    utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n                        reason: reason,\n                        signature: signature\n                    });\n                    return;\n                }\n            }\n            try {\n                result = method.formatOutput(result);\n            }\n            catch (e) {\n                err = e;\n            }\n            if (result instanceof Error) {\n                err = result;\n            }\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            }\n            else {\n                if (err.error) {\n                    err = err.error;\n                }\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n            // return PROMISE\n            if (!isSendTx) {\n                if (!err) {\n                    defer.resolve(result);\n                }\n                // return PROMIEVENT\n            }\n            else {\n                defer.eventEmitter.emit('transactionHash', result);\n                method._confirmTransaction(defer, result, payload);\n            }\n        };\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function (sign) {\n            var signedPayload = { ...payload,\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            };\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n        var sendRequest = function (payload, method) {\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((!!tx && typeof tx === 'object') ? tx.from : null, method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var tx = JSON.parse(JSON.stringify(tx));\n                        delete tx.from;\n                        if (method.defaultChain && !tx.chain) {\n                            tx.chain = method.defaultChain;\n                        }\n                        if (method.defaultHardfork && !tx.hardfork) {\n                            tx.hardfork = method.defaultHardfork;\n                        }\n                        if (method.defaultCommon && !tx.common) {\n                            tx.common = method.defaultCommon;\n                        }\n                        method.accounts.signTransaction(tx, wallet.privateKey)\n                            .then(sendSignedTx)\n                            .catch(function (err) {\n                            if (typeof defer.eventEmitter.listeners === 'function' && defer.eventEmitter.listeners('error').length) {\n                                try {\n                                    defer.eventEmitter.emit('error', err);\n                                }\n                                catch (err) {\n                                    // Ignore userland error prevent it to bubble up within web3.\n                                }\n                                defer.eventEmitter.removeAllListeners();\n                                defer.eventEmitter.catch(function () {\n                                });\n                            }\n                            defer.reject(err);\n                        });\n                        return;\n                    }\n                    // ETH_SIGN\n                }\n                else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n                }\n            }\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n        // Send the actual transaction\n        if (isSendTx\n            && !!payload.params[0]\n            && typeof payload.params[0] === 'object'\n            && (typeof payload.params[0].gasPrice === 'undefined'\n                && (typeof payload.params[0].maxPriorityFeePerGas === 'undefined'\n                    || typeof payload.params[0].maxFeePerGas === 'undefined'))) {\n            _handleTxPricing(method, payload.params[0]).then(txPricing => {\n                if (txPricing.gasPrice !== undefined) {\n                    payload.params[0].gasPrice = txPricing.gasPrice;\n                }\n                else if (txPricing.maxPriorityFeePerGas !== undefined\n                    && txPricing.maxFeePerGas !== undefined) {\n                    payload.params[0].maxPriorityFeePerGas = txPricing.maxPriorityFeePerGas;\n                    payload.params[0].maxFeePerGas = txPricing.maxFeePerGas;\n                }\n                if (isSendTx) {\n                    setTimeout(() => {\n                        defer.eventEmitter.emit('sending', payload);\n                    }, 0);\n                }\n                sendRequest(payload, method);\n            });\n        }\n        else {\n            if (isSendTx) {\n                setTimeout(() => {\n                    defer.eventEmitter.emit('sending', payload);\n                }, 0);\n            }\n            sendRequest(payload, method);\n        }\n        if (isSendTx) {\n            setTimeout(() => {\n                defer.eventEmitter.emit('sent', payload);\n            }, 0);\n        }\n        return defer.eventEmitter;\n    };\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\nfunction _handleTxPricing(method, tx) {\n    return new Promise((resolve, reject) => {\n        try {\n            var getBlockByNumber = (new Method({\n                name: 'getBlockByNumber',\n                call: 'eth_getBlockByNumber',\n                params: 2,\n                inputFormatter: [function (blockNumber) {\n                        return blockNumber ? utils.toHex(blockNumber) : 'latest';\n                    }, function () {\n                        return false;\n                    }]\n            })).createFunction(method.requestManager);\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n            Promise.all([\n                getBlockByNumber(),\n                getGasPrice()\n            ]).then(responses => {\n                const [block, gasPrice] = responses;\n                if ((tx.type === '0x2' || tx.type === undefined) &&\n                    (block && block.baseFeePerGas)) {\n                    // The network supports EIP-1559\n                    // Taken from https://github.com/ethers-io/ethers.js/blob/ba6854bdd5a912fe873d5da494cb5c62c190adde/packages/abstract-provider/src.ts/index.ts#L230\n                    let maxPriorityFeePerGas, maxFeePerGas;\n                    if (tx.gasPrice) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        maxPriorityFeePerGas = tx.gasPrice;\n                        maxFeePerGas = tx.gasPrice;\n                        delete tx.gasPrice;\n                    }\n                    else {\n                        maxPriorityFeePerGas = tx.maxPriorityFeePerGas || '0x9502F900'; // 2.5 Gwei\n                        maxFeePerGas = tx.maxFeePerGas ||\n                            utils.toHex(utils.toBN(block.baseFeePerGas)\n                                .mul(utils.toBN(2))\n                                .add(utils.toBN(maxPriorityFeePerGas)));\n                    }\n                    resolve({ maxFeePerGas, maxPriorityFeePerGas });\n                }\n                else {\n                    if (tx.maxPriorityFeePerGas || tx.maxFeePerGas)\n                        throw Error(\"Network doesn't support eip-1559\");\n                    resolve({ gasPrice });\n                }\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        (new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            abiCoder: self.abiCoder,\n            handleRevert: true\n        }))\n            .createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber))\n            .then(function () {\n            resolve(false);\n        })\n            .catch(function (error) {\n            if (error.reason) {\n                resolve({\n                    reason: error.reason,\n                    signature: error.signature\n                });\n            }\n            else {\n                reject(error);\n            }\n        });\n    });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\nMethod.prototype.isRevertReasonString = function (data) {\n    return typeof data === 'string' && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\nmodule.exports = Method;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}